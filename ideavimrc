" basic stuff
set hlsearch
set scrolloff=5
set ignorecase smartcase
set showmode
set history=1000
set incsearch
set clipboard+=unnamed
set relativenumber
set ReplaceWithRegister
set visualbell
set idearefactormode=visual
set showcmd
set showmode
set ideastatusicon=gray
set virtualedit=onemore

" extensions
set surround
set multiple-cursors
set highlightedyank
set NERDTree
set argtextobj
set sneak
set quickscope
set switch
set functiontextobj
set commentary
set mini-ai

" set the various handlers
sethandler <C-a> a:vim
sethandler <C-b> a:vim
sethandler <C-c> a:vim
sethandler <C-d> a:vim
sethandler <C-e> a:vim
sethandler <C-f> a:vim
sethandler <C-g> a:vim
sethandler <C-h> a:vim
sethandler <C-i> a:vim
sethandler <C-j> a:ide
sethandler <C-k> a:ide
sethandler <C-l> a:vim
sethandler <C-m> a:vim
sethandler <C-n> a:vim
sethandler <C-o> a:vim
sethandler <C-p> a:vim
sethandler <C-q> a:vim
sethandler <C-r> a:vim
sethandler <C-s> a:vim
sethandler <C-t> a:vim
sethandler <C-u> a:vim
sethandler <C-v> a:vim
sethandler <C-v> a:vim
sethandler <C-w> a:vim
sethandler <C-x> a:vim
sethandler <C-y> a:vim
sethandler <C-z> a:vim

" WhichKey configuration (plugin is toggled by <leader>8)
let g:WhichKey_FontSize = 20
let g:WhichKey_PrefixColor = "#a403fe"
let g:WhichKey_CommandColor = "#01ffff"
let g:WhichKey_PrefixStyle = "bold"
let g:WhichKey_KeyStyle = "italic"
let g:WhichKey_SortOrder = "by_key_prefix_first"
let g:WhichKey_ShowTypedSequence = "true"

" register leader
let mapleader = " "

nmap <leader>ss :Switch<cr>
nmap <leader>SS :SwitchReverse<cr>
let g:WhichKeyDesc_switch = "<leader>ss Switch"
let g:WhichKeyDesc_switch_reverse = "<leader>ss Switch"w

" Enable all patterns from multiple groups
let g:switch_definitions = 'group:basic,group:java,group:javascript'

nmap <leader>nn :NERDTree<CR>

" After block yank and paste, move cursor to the end of operated text and don't override register
vnoremap p "_dP`]
nnoremap p p`]

" Center screen after screen movement
nnoremap H Hzz
nnoremap M Mzz
nnoremap L Lzz

" Y yank whole line by default
vnoremap y ygv<Esc>$
nnoremap Y y$

" Yank and paste from clipboard
nnoremap ,y "+y
vnoremap ,y "+y
nnoremap ,yy "+yy
nnoremap ,p "+p

" have x (removes single character) not go into the default registry
nnoremap x "_x
" Make X an operator that removes without placing text in the default registry
nmap X "_d
nmap XX "_dd
vmap X "_d
vmap x "_d

" don't yank to default register when changing something
nnoremap c "xc
xnoremap c "xc

" Change line, better use S for this.
nmap cc 1S

" Copy Word
nmap ,c yiw

" Select word
nmap ,v viw

" Reselect last-pasted text
nnoremap gp `[v`]

" Center screen when jumping to next match
nnoremap n nzz
nnoremap N Nzz
vnoremap n nzz
vnoremap N Nzz

" Center screen when moving up and down
nnoremap <C-u> <C-u>zz
nnoremap <C-o> <C-d>zz
vnoremap <C-u> <C-u>zz
vnoremap <C-o> <C-d>zz

" easy window navigation
:map <a-k> gT
:map <a-j> gt
:map <Tab> <Action>(NextTab)
:map <S-Tab> <Action>(PreviousTab)

" clear the search buffer when hitting return
nnoremap <leader><cr> :nohlsearch<cr>

" select whole file
:map <Leader>aa ggVG

" code refactoring
:map <leader>rr <Action>(RenameElement)
:map <leader>RR <Action>(Refactorings.QuickListPopupAction)
:map <leader>sw <Action>(SurroundWith)
:map <leader>oi <Action>(OptimizeImports)
let g:WhichKeyDesc_rename_element = "<leader>rr Rename element"
let g:WhichKeyDesc_refactors = "<leader>RR Refactorings"
let g:WhichKeyDesc_surround_with = "<leader>sw Surround with"
let g:WhichKeyDesc_optimize_import = "<leader>sw Optimize import"

" stuff
:map <leader>er <Action>(QuickJavaDoc)
:map <leader>ee <Action>(ShowErrorDescription)
:map <leader>hh <Action>(QuickImplementations)
:map <leader>hj <Action>(ShowHoverInfo)
let g:WhichKeyDesc_quick_java_doc = "<leader>er Quick docs"
let g:WhichKeyDesc_show_error_description = "<leader>ee Show error description"
let g:WhichKeyDesc_quick_implementations = "<leader>hh Quick implementations"
let g:WhichKeyDesc_show_info = "<leader>hj Show info"

" breakpoints
:map <leader>ub <Action>(ToggleLineBreakpoint)
:map <leader>us <Action>(ViewBreakpoints)
:map <leader>ur <Action>(Debugger.RemoveAllBreakpoints)
let g:WhichKeyDesc_toggle_line_breakpoint = "<leader>ub Toggle line breakpoint"
let g:WhichKeyDesc_view_breakpoints = "<leader>us View breakpoints"
let g:WhichKeyDesc_remove_all_breakpoints = "<leader>ur Remove all breakpoints"

" bookmarks
nmap <leader>bs <Action>(ShowBookmarks)
nmap <leader>bt <Action>(ActivateBookmarksToolWindow)
nmap <leader>bb <Action>(ToggleBookmark)
nmap <leader>be <Action>(EditBookmark)
nmap <leader>bp <Action>(GotoPreviousBookmark)
nmap <leader>bn <Action>(GotoNextBookmark)
let g:WhichKeyDesc_bookmarks = "<leader>b Bookmarks"
let g:WhichKeyDesc_bookmarks_menu = "<leader>bm Bookmark Menu"
let g:WhichKeyDesc_bookmarks_show = "<leader>bs Show Bookmarks"
let g:WhichKeyDesc_bookmarks_tool = "<leader>bt Bookmark Tool"
let g:WhichKeyDesc_bookmarks_toggle_bookmark = "<leader>bb Toggle Bookmark"
let g:WhichKeyDesc_bookmarks_edit = "<leader>be Edit Bookmark"
let g:WhichKeyDesc_bookmarks_prev = "<leader>bp Previous Bookmark"
let g:WhichKeyDesc_bookmarks_next = "<leader>bn Next Bookmark"

" commenting
xmap <Leader>/ <Action>(CommentByLineComment)<ESC><ESC>
nmap <Leader>/ <Action>(CommentByLineComment)k

" ace
:map ff <Action>(AceAction)
:map fv <Action>(AceTargetAction)
:map fl <Action>(AceLineAction)
let g:WhichKeyDesc_ace_action = "ff Ace action"
let g:WhichKeyDesc_ace_target_action = "fv Ace target action"
let g:WhichKeyDesc_ace_line_action = "fl Ace line action"

" various functionality
:map <leader>hu <Action>(HighlightUsagesInFile)
:map <leader>rl <Action>(RecentLocations)
:map gy <Action>(RecentChangedFiles)
:map <leader>sh <Action>(LocalHistory.ShowHistory)
:map <leader>m <Action>(ShowIntentionActions)
:map <leader>o <Action>(FileStructurePopup)
:map <leader>pw <Action>(SelectInProjectView)
:map <leader>rt <Action>(RunContextGroup)
:map gh <Action>(GotoDeclaration)
:map <leader>so <Action>(SelectAllOccurrences)
let g:WhichKeyDesc_highlight_usages_in_file = "<leader>hu Highlight usages in file"
let g:WhichKeyDesc_recent_locations = "<leader>rl Recent locations"
let g:WhichKeyDesc_recent_changed_files = "gy Recent changed files"
let g:WhichKeyDesc_show_history = "<leader>sh Show history"
let g:WhichKeyDesc_show_intent_actions = "<leader>m Show intent actions"
let g:WhichKeyDesc_file_structure_popup = "<leader>o File structure popup"
let g:WhichKeyDesc_select_in_project_view = "<leader>pw Select in project view"
let g:WhichKeyDesc_run_context_group = "<leader>rt Run context group"
let g:WhichKeyDesc_goto_declaration = "gh Goto declaration"
let g:WhichKeyDesc_select_all_occurrences = "<leader>so Select all occurrences"

xnoremap < <gv
xnoremap > >gv

" copy whole file
nmap <C-a> ggVG"+y

" code navigation
:map [[ <Action>(MethodUp)
:map ]] <Action>(MethodDown)
:map g[ <Action>(GotoNextError)
:map g] <Action>(GotoPreviousError)
:map <leader>k <Action>(JumpToLastChange)
:map <leader>K <Action>(JumpToNextChange)
:map gn <Action>(GotoNextElementUnderCaretUsage)
:map gN <Action>(GotoPrevElementUnderCaretUsage)
let g:WhichKeyDesc_goto_next_error = "g] Goto next error"
let g:WhichKeyDesc_goto_previous_error = "g[ Goto previous error"
let g:WhichKeyDesc_jump_to_last_change = "<leader>k Jump to last change"
let g:WhichKeyDesc_jump_to_next_change = "<leader>K Jump to next change"
let g:WhichKeyDesc_goto_next_element_under_caret_usage = "gn Goto next element under caret usage"
let g:WhichKeyDesc_goto_prev_element_under_caret_usage = "gN Goto previous element under caret usage"

" splits
:map <Leader>sv <Action>(SplitVertically)
:map <Leader>sn <Action>(PrevSplitter)

" built-in navigation to navigated items works better
:nmap <c-o> <Action>(Back)
:nmap <c-i> <Action>(Forward)

" but preserve ideavim defaults
:map g<c-o> <c-o>
:map g<c-i> <c-i>

" close stuff
:map <leader>q <Action>(CloseEditor)
:map <leader>Q <Action>(CloseAllEditors)
:map <leader>w <Action>(CloseAllEditorsButActive)

" reactivate some IDEA shortcuts
:map <c-n> <Action>(SearchEverywhere)
:map <leader>gg <Action>(GotoFile)
:map <c-b> <Action>(ShowUsages)
:map <c-s> <Action>(SaveAll)
:map <c-c> <Action>(GotoImplementation)

" run stuff
:map <leader>cg <Action>(ChooseRunConfiguration)
:map <leader>dg <Action>(ChooseDebugConfiguration)
:map <leader>1 <Action>(Run)
:map <leader>2 <Action>(Debug)
:map <leader>0 <Action>(Stop)
let g:WhichKeyDesc_choose_run_configuration = "<leader>cg Choose run configuration"
let g:WhichKeyDesc_choose_debug_configuration = "<leader>dg Choose debug configuration"
let g:WhichKeyDesc_run = "<leader>1 Run"
let g:WhichKeyDesc_debug = "<leader>2 Debug"
let g:WhichKeyDesc_stop = "<leader>0 Stop"

" other things
:map <leader>ns <Action>(NewScratchBuffer)
:map <leader>nd <Action>(Scratch.ChangeLanguage)
:map <leader>an <Action>(Annotate)
:map <leader>tw <Action>(ActivateProjectToolWindow)
nnoremap <leader>rb :s /<<<<<<<\\|=======\\|>>>>>>><CR>
let g:WhichKeyDesc_new_scratch_file = "<leader>ns New scratch file"
let g:WhichKeyDesc_annotate = "<leader>an Annotate"
let g:WhichKeyDesc_activate_project_window = "<leader>tw Activate project tool window"

" toggle line number relative
function! NumberToggle()
  if(&relativenumber == 1)
    set norelativenumber
  else
    set relativenumber number
  endif
endfunction

nnoremap <leader><Tab> :call NumberToggle()<cr>
let g:WhichKeyDesc_toggle_line_numbers = "<leader><Tab> Toggle line numbers"

" HarpoonIJ
map <leader>hs <Action>(ShowHarpoon)
map <leader>ha <Action>(AddToHarpoon)
map <leader>H1 <Action>(SetHarpoon1)
map <leader>H2 <Action>(SetHarpoon2)
map <leader>H3 <Action>(SetHarpoon3)
map <leader>H4 <Action>(SetHarpoon4)
map <leader>H5 <Action>(SetHarpoon5)
map <leader>h1 <Action>(GotoHarpoon1)
map <leader>h2 <Action>(GotoHarpoon2)
map <leader>h3 <Action>(GotoHarpoon3)
map <leader>h4 <Action>(GotoHarpoon4)
map <leader>h5 <Action>(GotoHarpoon5)

" toggle which-key plugin
let s:whichKeyEnabled = 0
function! WhichKeyToggle()
  if s:whichKeyEnabled
    set which-key!
    set notimeout!
    let s:whichKeyEnabled = 0
  else
    set which-key
    set notimeout
    let s:whichKeyEnabled = 1
  endif
endfunction

nnoremap <leader>8 :call WhichKeyToggle()<cr>
let g:WhichKeyDesc_toggle_which_key = "<leader>8 Toggle WhichKey"

" source
:map <leader>9 :source ~/.ideavimrc<CR>
let g:WhichKeyDesc_reload_vim_rc = "<leader>9 Reload VimRc"

nmap <C-n> <Plug>NextWholeOccurrence
xmap <C-n> <Plug>NextWholeOccurrence
nmap g<C-n> <Plug>NextOccurrence
xmap g<C-n> <Plug>NextOccurrence
xmap <C-x> <Plug>SkipOccurrence
xmap <C-p> <Plug>RemoveOccurrence

nnoremap [e  :<c-u>execute 'move -1-'. v:count1<cr>
nnoremap ]e  :<c-u>execute 'move +'. v:count1<cr>
